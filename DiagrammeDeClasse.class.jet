{"diagram":"ClassDiagram","nodes":[{"methods":"public Controller() \/\/ Constructeur\npublic BoardGame initGame() \/\/ Initialise la partie\npublic void playGame(BoardGame game) \/\/ Contrôle une partie\npublic void restartGame() \/\/ Gère fin de partie\npublic void quitGame() \/\/ Quitter le jeu\nprivate void validateIntChoice(int choice, int rangeMax) throws InvalidRangeException \/\/ Controle valeur de int","name":"public class Controller","x":1000,"y":470,"attributes":"private final View view;\nprivate final InteractionUtilisateur user;","id":0,"type":"ClassNode"},{"methods":"public TicTacToe(int playersType) \/\/ Constructeur","name":"public class TicTacToe extends BoardGame","x":400,"y":1260,"attributes":"","id":1,"type":"ClassNode"},{"methods":"public Gomoku(int playersType) \/\/ Constructeur","name":"public class Gomoku extends BoardGame","x":690,"y":1260,"attributes":"","id":2,"type":"ClassNode"},{"methods":"public BoardGame(int playersType) \/\/ Constructeur\npublic void initBoard() \/\/ Initialise plateau\npublic Player[] getPlayers() \/\/ Retourne les joueurs\npublic Cell[][] getBoard() \/\/ Retourne le plateau\nprotected int[] getMoveFromPlayer() \/\/ Retourne coup joueur\nprivate Player[] initializePlayers(int gameType) \/\/ Initialise les joueurs\npublic boolean isOver(Cell[][] board, Player player) \/\/ Check fin de partie\nprivate boolean isBoardFull() \/\/ Check plateau complet\nprivate boolean hasWinner(Cell[][] board, Player player, int winCondition) \/\/ Check joueur gagne\nprivate static boolean checkDirection(Cell[][] board, Player player, int winCondition, int startRow, int startCol, int rowDir, int colDir) \/\/ Check ligne gagne\nprivate static boolean checkDirection(Cell[][] board, Player player, int winCondition, int startRow, int startCol, int rowDir, int colDir)","name":"public abstract class BoardGame","x":410,"y":890,"attributes":"protected int size;\nprotected int winCondition;\nprotected Cell[][] board;\nprotected View view = new View();","id":3,"type":"ClassNode"},{"methods":"public Player getOwner() \/\/ Retourne le Player propriétaire\npublic void setOwner(Player owner) \/\/ Instancie le Player propriétaire\npublic String getRepresentation() \/\/ Retourne la représentation","name":"public class Cell","x":630,"y":710,"attributes":"private String representation = \" \";\nprivate Player owner = null;","id":4,"type":"ClassNode"},{"methods":"public Puissance4(int playersType) \/\/ Constructeur\npublic int[] getMoveFromPlayer() \/\/Override","name":"public class Puissance4 extends BoardGame","x":980,"y":1260,"attributes":"","id":5,"type":"ClassNode"},{"methods":"public Player(String symbol) \/\/ Constructeur\npublic String getName() \/\/ Retourne nom\npublic String getSymbol() \/\/ Retourne symbole","name":"abstract public class Player","x":1600,"y":770,"attributes":"private String symbol = null;\nprivate String name = null;","id":6,"type":"ClassNode"},{"methods":"public ArtificialPlayer(String symbol) \/\/ Constructeur\npublic int[] generateRandomPosition(Cell[][] board) \/\/ Génère position aléatoire","name":"public class ArtificialPlayer extends Player","x":1300,"y":1000,"attributes":"private enum Level {EASY,MEDIUM,HARD };\nprivate final Level IADifficulty;","id":7,"type":"ClassNode"},{"methods":"public HumanPlayer(String symbol) \/\/ Constructeur","name":"public class HumanPlayer extends Player","x":1780,"y":1000,"attributes":"","id":8,"type":"ClassNode"},{"methods":"public void display(Cell[][] board) \/\/ Affiche plateau\npublic String getMessageChoiceGame() \/\/ Choix jeu\npublic String getMesaggeChoicePlayer() \/\/ Type de partie\npublic void messageQuitGame() \/\/ Fin de partie\npublic String messageRestart() \/\/ Demande si rejoue\npublic void askCoordinate(char coordinate) \/\/ Demande une coordonnée\npublic void messageNormal(String message) \/\/ Police noire\npublic void messageVictory(String message) \/\/ Police verte\npublic void messageError(String message) \/\/ Police rouge\nublic void announceWinner(String name) \/\/ Annonce vainqueur","name":"public class View","x":820,"y":80,"attributes":"private static final String ANSI_BLACK = \"\\u001B[30m\";\nprivate static final String ANSI_GREEN = \"\\u001B[32m\";\nprivate static final String ANSI_BLUE = \"\\u001B[34m\";","id":9,"type":"ClassNode"},{"methods":"public int askInt(String message) throws Exception \/\/ Demande int\npublic String askString(String message) throws Exception \/\/ Demande String","name":"public class InteractionUtilisateur","x":1450,"y":150,"attributes":"private final View view;\nprivate final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));","id":10,"type":"ClassNode"}],"edges":[{"Generalization Type":"Inheritance","start":1,"end":3,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":2,"end":3,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":5,"end":3,"type":"GeneralizationEdge"},{"middleLabel":"","start":3,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"Generalization Type":"Inheritance","start":7,"end":6,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":8,"end":6,"type":"GeneralizationEdge"}],"version":"3.8"}
