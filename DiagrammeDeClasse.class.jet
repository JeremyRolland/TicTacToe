{"diagram":"ClassDiagram","nodes":[{"methods":"public ArtificialPlayer(String symbol) \/\/ Constructeur\npublic int[] generateRandomPosition(Cell[][] board) \/\/ Génère position aléatoire","name":"public class ArtificialPlayer extends Player","x":1420,"y":1240,"attributes":"private enum Level {EASY,MEDIUM,HARD };\nprivate final Level IADifficulty;","id":0,"type":"ClassNode"},{"methods":"public HumanPlayer(String symbol) \/\/ Constructeur","name":"public class HumanPlayer extends Player","x":1880,"y":1250,"attributes":"","id":1,"type":"ClassNode"},{"methods":"public Player(String symbol) \/\/ Constructeur\npublic String getName() \/\/ Retourne nom\npublic void setName(String name) \/\/ Instancie nom\npublic String getSymbol() \/\/ Retourne symbole\nprotected void setSymbol(String symbol) \/\/ Instancie symbole","name":"abstract public class Player","x":1650,"y":920,"attributes":"private String symbol = null;\nprivate String name = null;\nprotected View view = new View();","id":2,"type":"ClassNode"},{"methods":"public Player getOwner() \/\/ Retourne le Player propriétaire\npublic void setOwner(Player owner) \/\/ Instancie le Player propriétaire\npublic String getRepresentation() \/\/ Retourne la représentation","name":"public class Cell","x":390,"y":510,"attributes":"private String representation = \"|   \";\nprivate Player owner = null;","id":3,"type":"ClassNode"},{"methods":"public void initBoard()\npublic void play()\nprotected int[] getMoveFromPlayer()\nprivate Player[] initializePlayers(int gameType)\nprivate boolean isOver(Cell[][] board, Player player, int winCondition)\nprivate boolean isBoardFull()\nprivate boolean hasWinner(Cell[][] board, Player player, int winCondition)\nprivate static boolean checkDirection(Cell[][] board, Player player, int winCondition, int startRow, int startCol, int rowDir, int colDir)","name":"public abstract class BoardGame","x":230,"y":690,"attributes":"protected int size;\nprotected int winCondition;\nprotected Cell[][] board;\nprotected View view = new View();\nprivate InteractionUtilisateur interactionUtilisateur = new InteractionUtilisateur(view);\nprotected Player currentPlayer;","id":4,"type":"ClassNode"},{"methods":"public TicTacToe() \/\/ Constructeur","name":"public class TicTacToe extends BoardGame","x":170,"y":1060,"attributes":"","id":5,"type":"ClassNode"},{"methods":"public Gomoku() \/\/ Constructeur","name":"public class Gomoku extends BoardGame","x":460,"y":1060,"attributes":"","id":6,"type":"ClassNode"},{"methods":"public Puissance4() \/\/ Constructeur\npublic int[] getMoveFromPlayer() \/\/Override","name":"public class Puissance4 extends BoardGame","x":760,"y":1050,"attributes":"","id":7,"type":"ClassNode"},{"children":[9],"name":"","x":1580,"y":130,"id":8,"type":"PackageNode"},{"name":"Player","x":1490,"y":800,"id":9,"type":"PackageNode"},{"methods":"public BoardGame createBoardGame(); \/\/ Créer l'instance du jeu choisi","name":"public class Game ","x":410,"y":320,"attributes":"private View view = new View();\nprivate InteractionUtilisateur interactionUtilisateur = new InteractionUtilisateur(view);","id":10,"type":"ClassNode"},{"methods":"public void display(Cell[][] board) \/\/ Affiche plateau\npublic void askCoordinate(char coordinate) \/\/ Demande une coordonnée\npublic void messageNormal(String message) \/\/ Police noire\npublic void messageVictory(String message) \/\/ Police verte\npublic void messageError(String message) \/\/ Police rouge","name":"public class View","x":1560,"y":160,"attributes":"private static final String ANSI_BLACK = \"\\u001B[30m\";\nprivate static final String ANSI_GREEN = \"\\u001B[32m\";\nprivate static final String ANSI_BLUE = \"\\u001B[34m\";","id":11,"type":"ClassNode"},{"methods":"public InteractionUtilisateur(View view) \/\/ Constructeur\npublic int getGame() \/\/ Demande jeu à jouer\npublic int getGameType() \/\/ Demande type de partie\npublic void restartGame(BoardGame game) \/\/ Recommence partie\npublic void quitGame() \/\/ Quitte jeu\npublic void announceWinner(Player player) \/\/ Annonce vainqueur","name":"public class InteractionUtilisateur","x":1970,"y":170,"attributes":"private final View view;","id":12,"type":"ClassNode"},{"children":[14],"name":"","x":2140,"y":180,"id":13,"type":"PackageNode"},{"name":"tools","x":1830,"y":510,"id":14,"type":"PackageNode"},{"name":"game","x":950,"y":500,"id":15,"type":"PackageNode"}],"edges":[{"Generalization Type":"Inheritance","start":5,"end":4,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":6,"end":4,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":7,"end":4,"type":"GeneralizationEdge"},{"middleLabel":"","start":4,"directionality":"Unidirectional","end":3,"type":"DependencyEdge"},{"Generalization Type":"Inheritance","start":0,"end":2,"type":"GeneralizationEdge"},{"Generalization Type":"Inheritance","start":1,"end":2,"type":"GeneralizationEdge"},{"middleLabel":"","start":11,"directionality":"Unidirectional","end":3,"type":"DependencyEdge"},{"middleLabel":"","start":12,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"middleLabel":"","start":12,"directionality":"Unidirectional","end":2,"type":"DependencyEdge"},{"middleLabel":"","start":3,"directionality":"Unidirectional","end":2,"type":"DependencyEdge"},{"middleLabel":"","start":0,"directionality":"Unidirectional","end":3,"type":"DependencyEdge"},{"middleLabel":"","start":2,"directionality":"Unidirectional","end":11,"type":"DependencyEdge"},{"middleLabel":"","start":4,"directionality":"Unidirectional","end":9,"type":"DependencyEdge"},{"middleLabel":"","start":4,"directionality":"Unidirectional","end":14,"type":"DependencyEdge"},{"middleLabel":"","start":10,"directionality":"Unidirectional","end":14,"type":"DependencyEdge"}],"version":"3.8"}
